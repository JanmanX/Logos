# Generated from Logos.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,32,237,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,13,5,13,121,8,13,10,13,
        12,13,124,9,13,1,14,1,14,1,14,4,14,129,8,14,11,14,12,14,130,1,14,
        1,14,1,14,4,14,136,8,14,11,14,12,14,137,1,14,4,14,141,8,14,11,14,
        12,14,142,3,14,145,8,14,1,15,4,15,148,8,15,11,15,12,15,149,1,15,
        1,15,5,15,154,8,15,10,15,12,15,157,9,15,1,15,1,15,4,15,161,8,15,
        11,15,12,15,162,3,15,165,8,15,1,16,1,16,1,16,5,16,170,8,16,10,16,
        12,16,173,9,16,1,16,1,16,1,17,1,17,5,17,179,8,17,10,17,12,17,182,
        9,17,1,17,1,17,1,17,1,17,1,18,4,18,189,8,18,11,18,12,18,190,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,3,33,229,8,33,1,34,
        1,34,1,35,1,35,1,36,1,36,1,36,2,171,180,0,37,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
        28,57,29,59,30,61,31,63,32,65,0,67,0,69,0,71,0,73,0,1,0,4,3,0,9,
        10,13,13,32,32,2,0,65,70,97,102,3,0,65,90,95,95,97,122,6,0,34,34,
        92,92,98,98,110,110,114,114,116,116,247,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,
        75,1,0,0,0,3,82,1,0,0,0,5,84,1,0,0,0,7,86,1,0,0,0,9,88,1,0,0,0,11,
        90,1,0,0,0,13,92,1,0,0,0,15,98,1,0,0,0,17,100,1,0,0,0,19,102,1,0,
        0,0,21,105,1,0,0,0,23,111,1,0,0,0,25,115,1,0,0,0,27,117,1,0,0,0,
        29,144,1,0,0,0,31,164,1,0,0,0,33,166,1,0,0,0,35,176,1,0,0,0,37,188,
        1,0,0,0,39,194,1,0,0,0,41,196,1,0,0,0,43,198,1,0,0,0,45,200,1,0,
        0,0,47,202,1,0,0,0,49,205,1,0,0,0,51,208,1,0,0,0,53,210,1,0,0,0,
        55,213,1,0,0,0,57,215,1,0,0,0,59,218,1,0,0,0,61,220,1,0,0,0,63,222,
        1,0,0,0,65,224,1,0,0,0,67,228,1,0,0,0,69,230,1,0,0,0,71,232,1,0,
        0,0,73,234,1,0,0,0,75,76,5,114,0,0,76,77,5,105,0,0,77,78,5,116,0,
        0,78,79,5,117,0,0,79,80,5,97,0,0,80,81,5,108,0,0,81,2,1,0,0,0,82,
        83,5,40,0,0,83,4,1,0,0,0,84,85,5,41,0,0,85,6,1,0,0,0,86,87,5,123,
        0,0,87,8,1,0,0,0,88,89,5,125,0,0,89,10,1,0,0,0,90,91,5,61,0,0,91,
        12,1,0,0,0,92,93,5,97,0,0,93,94,5,108,0,0,94,95,5,108,0,0,95,96,
        5,111,0,0,96,97,5,99,0,0,97,14,1,0,0,0,98,99,5,91,0,0,99,16,1,0,
        0,0,100,101,5,93,0,0,101,18,1,0,0,0,102,103,5,105,0,0,103,104,5,
        102,0,0,104,20,1,0,0,0,105,106,5,119,0,0,106,107,5,104,0,0,107,108,
        5,105,0,0,108,109,5,108,0,0,109,110,5,101,0,0,110,22,1,0,0,0,111,
        112,5,101,0,0,112,113,5,110,0,0,113,114,5,100,0,0,114,24,1,0,0,0,
        115,116,5,44,0,0,116,26,1,0,0,0,117,122,3,71,35,0,118,121,3,71,35,
        0,119,121,3,65,32,0,120,118,1,0,0,0,120,119,1,0,0,0,121,124,1,0,
        0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,28,1,0,0,0,124,122,1,0,0,
        0,125,126,5,48,0,0,126,128,5,120,0,0,127,129,3,67,33,0,128,127,1,
        0,0,0,129,130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,145,1,
        0,0,0,132,133,5,48,0,0,133,135,5,98,0,0,134,136,3,69,34,0,135,134,
        1,0,0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,145,
        1,0,0,0,139,141,3,65,32,0,140,139,1,0,0,0,141,142,1,0,0,0,142,140,
        1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,125,1,0,0,0,144,132,
        1,0,0,0,144,140,1,0,0,0,145,30,1,0,0,0,146,148,3,65,32,0,147,146,
        1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,151,
        1,0,0,0,151,155,5,46,0,0,152,154,3,65,32,0,153,152,1,0,0,0,154,157,
        1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,0,156,165,1,0,0,0,157,155,
        1,0,0,0,158,160,5,46,0,0,159,161,3,65,32,0,160,159,1,0,0,0,161,162,
        1,0,0,0,162,160,1,0,0,0,162,163,1,0,0,0,163,165,1,0,0,0,164,147,
        1,0,0,0,164,158,1,0,0,0,165,32,1,0,0,0,166,171,5,34,0,0,167,170,
        3,73,36,0,168,170,9,0,0,0,169,167,1,0,0,0,169,168,1,0,0,0,170,173,
        1,0,0,0,171,172,1,0,0,0,171,169,1,0,0,0,172,174,1,0,0,0,173,171,
        1,0,0,0,174,175,5,34,0,0,175,34,1,0,0,0,176,180,5,35,0,0,177,179,
        9,0,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,181,1,0,0,0,180,178,
        1,0,0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,10,0,0,184,185,
        1,0,0,0,185,186,6,17,0,0,186,36,1,0,0,0,187,189,7,0,0,0,188,187,
        1,0,0,0,189,190,1,0,0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,192,
        1,0,0,0,192,193,6,18,0,0,193,38,1,0,0,0,194,195,5,43,0,0,195,40,
        1,0,0,0,196,197,5,45,0,0,197,42,1,0,0,0,198,199,5,42,0,0,199,44,
        1,0,0,0,200,201,5,47,0,0,201,46,1,0,0,0,202,203,5,61,0,0,203,204,
        5,61,0,0,204,48,1,0,0,0,205,206,5,33,0,0,206,207,5,61,0,0,207,50,
        1,0,0,0,208,209,5,62,0,0,209,52,1,0,0,0,210,211,5,62,0,0,211,212,
        5,61,0,0,212,54,1,0,0,0,213,214,5,60,0,0,214,56,1,0,0,0,215,216,
        5,60,0,0,216,217,5,61,0,0,217,58,1,0,0,0,218,219,5,38,0,0,219,60,
        1,0,0,0,220,221,5,94,0,0,221,62,1,0,0,0,222,223,5,124,0,0,223,64,
        1,0,0,0,224,225,2,48,57,0,225,66,1,0,0,0,226,229,7,1,0,0,227,229,
        3,65,32,0,228,226,1,0,0,0,228,227,1,0,0,0,229,68,1,0,0,0,230,231,
        2,48,49,0,231,70,1,0,0,0,232,233,7,2,0,0,233,72,1,0,0,0,234,235,
        5,92,0,0,235,236,7,3,0,0,236,74,1,0,0,0,16,0,120,122,130,137,142,
        144,149,155,162,164,169,171,180,190,228,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    ID = 14
    INT = 15
    FLOAT = 16
    STRING = 17
    COMMENT = 18
    WS = 19
    OP_ADD = 20
    OP_SUB = 21
    OP_MUL = 22
    OP_DIV = 23
    OP_EQ = 24
    OP_NEQ = 25
    OP_GT = 26
    OP_GEQ = 27
    OP_LT = 28
    OP_LEQ = 29
    OP_AND = 30
    OP_XOR = 31
    OP_OR = 32

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'ritual'", "'('", "')'", "'{'", "'}'", "'='", "'alloc'", "'['", 
            "']'", "'if'", "'while'", "'end'", "','", "'+'", "'-'", "'*'", 
            "'/'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", "'&'", 
            "'^'", "'|'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "ID", 
                  "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
                  "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", 
                  "OP_LT", "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "DIGIT", 
                  "HEXDIGIT", "BINDIGIT", "ID_LETER", "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


