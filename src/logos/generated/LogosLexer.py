# Generated from Logos.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,35,257,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,
        1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,14,5,14,135,8,14,
        10,14,12,14,138,9,14,1,15,1,15,1,15,4,15,143,8,15,11,15,12,15,144,
        1,15,1,15,1,15,4,15,150,8,15,11,15,12,15,151,1,15,4,15,155,8,15,
        11,15,12,15,156,3,15,159,8,15,1,16,4,16,162,8,16,11,16,12,16,163,
        1,16,1,16,5,16,168,8,16,10,16,12,16,171,9,16,1,16,1,16,4,16,175,
        8,16,11,16,12,16,176,3,16,179,8,16,1,17,1,17,1,17,5,17,184,8,17,
        10,17,12,17,187,9,17,1,17,1,17,1,18,1,18,5,18,193,8,18,10,18,12,
        18,196,9,18,1,18,1,18,1,18,1,18,1,19,4,19,203,8,19,11,19,12,19,204,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,
        1,35,1,36,1,36,3,36,249,8,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,
        2,185,194,0,40,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,0,73,0,75,0,77,0,79,0,1,0,4,3,0,9,10,13,13,32,
        32,2,0,65,70,97,102,3,0,65,90,95,95,97,122,6,0,34,34,92,92,98,98,
        110,110,114,114,116,116,267,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
        0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,
        27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,
        37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
        47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
        57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,
        67,1,0,0,0,0,69,1,0,0,0,1,81,1,0,0,0,3,88,1,0,0,0,5,90,1,0,0,0,7,
        92,1,0,0,0,9,94,1,0,0,0,11,96,1,0,0,0,13,98,1,0,0,0,15,104,1,0,0,
        0,17,106,1,0,0,0,19,108,1,0,0,0,21,111,1,0,0,0,23,117,1,0,0,0,25,
        125,1,0,0,0,27,129,1,0,0,0,29,131,1,0,0,0,31,158,1,0,0,0,33,178,
        1,0,0,0,35,180,1,0,0,0,37,190,1,0,0,0,39,202,1,0,0,0,41,208,1,0,
        0,0,43,210,1,0,0,0,45,212,1,0,0,0,47,214,1,0,0,0,49,216,1,0,0,0,
        51,219,1,0,0,0,53,222,1,0,0,0,55,224,1,0,0,0,57,227,1,0,0,0,59,229,
        1,0,0,0,61,232,1,0,0,0,63,234,1,0,0,0,65,236,1,0,0,0,67,238,1,0,
        0,0,69,241,1,0,0,0,71,244,1,0,0,0,73,248,1,0,0,0,75,250,1,0,0,0,
        77,252,1,0,0,0,79,254,1,0,0,0,81,82,5,114,0,0,82,83,5,105,0,0,83,
        84,5,116,0,0,84,85,5,117,0,0,85,86,5,97,0,0,86,87,5,108,0,0,87,2,
        1,0,0,0,88,89,5,40,0,0,89,4,1,0,0,0,90,91,5,41,0,0,91,6,1,0,0,0,
        92,93,5,123,0,0,93,8,1,0,0,0,94,95,5,125,0,0,95,10,1,0,0,0,96,97,
        5,61,0,0,97,12,1,0,0,0,98,99,5,97,0,0,99,100,5,108,0,0,100,101,5,
        108,0,0,101,102,5,111,0,0,102,103,5,99,0,0,103,14,1,0,0,0,104,105,
        5,91,0,0,105,16,1,0,0,0,106,107,5,93,0,0,107,18,1,0,0,0,108,109,
        5,105,0,0,109,110,5,102,0,0,110,20,1,0,0,0,111,112,5,119,0,0,112,
        113,5,104,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,116,5,101,
        0,0,116,22,1,0,0,0,117,118,5,105,0,0,118,119,5,110,0,0,119,120,5,
        99,0,0,120,121,5,108,0,0,121,122,5,117,0,0,122,123,5,100,0,0,123,
        124,5,101,0,0,124,24,1,0,0,0,125,126,5,101,0,0,126,127,5,110,0,0,
        127,128,5,100,0,0,128,26,1,0,0,0,129,130,5,44,0,0,130,28,1,0,0,0,
        131,136,3,77,38,0,132,135,3,77,38,0,133,135,3,71,35,0,134,132,1,
        0,0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,
        0,0,0,137,30,1,0,0,0,138,136,1,0,0,0,139,140,5,48,0,0,140,142,5,
        120,0,0,141,143,3,73,36,0,142,141,1,0,0,0,143,144,1,0,0,0,144,142,
        1,0,0,0,144,145,1,0,0,0,145,159,1,0,0,0,146,147,5,48,0,0,147,149,
        5,98,0,0,148,150,3,75,37,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,
        1,0,0,0,151,152,1,0,0,0,152,159,1,0,0,0,153,155,3,71,35,0,154,153,
        1,0,0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,
        1,0,0,0,158,139,1,0,0,0,158,146,1,0,0,0,158,154,1,0,0,0,159,32,1,
        0,0,0,160,162,3,71,35,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,
        1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,0,165,169,5,46,0,0,166,168,
        3,71,35,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,179,1,0,0,0,171,169,1,0,0,0,172,174,5,46,0,0,173,175,
        3,71,35,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,
        1,0,0,0,177,179,1,0,0,0,178,161,1,0,0,0,178,172,1,0,0,0,179,34,1,
        0,0,0,180,185,5,34,0,0,181,184,3,79,39,0,182,184,9,0,0,0,183,181,
        1,0,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,186,1,0,0,0,185,183,
        1,0,0,0,186,188,1,0,0,0,187,185,1,0,0,0,188,189,5,34,0,0,189,36,
        1,0,0,0,190,194,5,35,0,0,191,193,9,0,0,0,192,191,1,0,0,0,193,196,
        1,0,0,0,194,195,1,0,0,0,194,192,1,0,0,0,195,197,1,0,0,0,196,194,
        1,0,0,0,197,198,5,10,0,0,198,199,1,0,0,0,199,200,6,18,0,0,200,38,
        1,0,0,0,201,203,7,0,0,0,202,201,1,0,0,0,203,204,1,0,0,0,204,202,
        1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,6,19,0,0,207,40,
        1,0,0,0,208,209,5,43,0,0,209,42,1,0,0,0,210,211,5,45,0,0,211,44,
        1,0,0,0,212,213,5,42,0,0,213,46,1,0,0,0,214,215,5,47,0,0,215,48,
        1,0,0,0,216,217,5,61,0,0,217,218,5,61,0,0,218,50,1,0,0,0,219,220,
        5,33,0,0,220,221,5,61,0,0,221,52,1,0,0,0,222,223,5,62,0,0,223,54,
        1,0,0,0,224,225,5,62,0,0,225,226,5,61,0,0,226,56,1,0,0,0,227,228,
        5,60,0,0,228,58,1,0,0,0,229,230,5,60,0,0,230,231,5,61,0,0,231,60,
        1,0,0,0,232,233,5,38,0,0,233,62,1,0,0,0,234,235,5,94,0,0,235,64,
        1,0,0,0,236,237,5,124,0,0,237,66,1,0,0,0,238,239,5,124,0,0,239,240,
        5,124,0,0,240,68,1,0,0,0,241,242,5,38,0,0,242,243,5,38,0,0,243,70,
        1,0,0,0,244,245,2,48,57,0,245,72,1,0,0,0,246,249,7,1,0,0,247,249,
        3,71,35,0,248,246,1,0,0,0,248,247,1,0,0,0,249,74,1,0,0,0,250,251,
        2,48,49,0,251,76,1,0,0,0,252,253,7,2,0,0,253,78,1,0,0,0,254,255,
        5,92,0,0,255,256,7,3,0,0,256,80,1,0,0,0,16,0,134,136,144,151,156,
        158,163,169,176,178,183,185,194,204,248,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    ID = 15
    INT = 16
    FLOAT = 17
    STRING = 18
    COMMENT = 19
    WS = 20
    OP_ADD = 21
    OP_SUB = 22
    OP_MUL = 23
    OP_DIV = 24
    OP_EQ = 25
    OP_NEQ = 26
    OP_GT = 27
    OP_GEQ = 28
    OP_LT = 29
    OP_LEQ = 30
    OP_AND = 31
    OP_XOR = 32
    OP_OR = 33
    OP_LOGICAL_OR = 34
    OP_LOGICAL_AND = 35

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'ritual'", "'('", "')'", "'{'", "'}'", "'='", "'alloc'", "'['", 
            "']'", "'if'", "'while'", "'include'", "'end'", "','", "'+'", 
            "'-'", "'*'", "'/'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
            "'&'", "'^'", "'|'", "'||'", "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", 
                  "OP_SUB", "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", 
                  "OP_GEQ", "OP_LT", "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", 
                  "OP_LOGICAL_OR", "OP_LOGICAL_AND", "DIGIT", "HEXDIGIT", 
                  "BINDIGIT", "ID_LETER", "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


