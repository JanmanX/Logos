# Generated from Logos.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,
        0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
        4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,4,6,92,8,6,11,6,12,6,93,1,7,4,
        7,97,8,7,11,7,12,7,98,1,8,4,8,102,8,8,11,8,12,8,103,1,8,1,8,1,9,
        4,9,109,8,9,11,9,12,9,110,1,9,1,9,5,9,115,8,9,10,9,12,9,118,9,9,
        1,9,1,9,4,9,122,8,9,11,9,12,9,123,3,9,126,8,9,1,10,1,10,1,10,5,10,
        131,8,10,10,10,12,10,134,9,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,
        142,8,11,10,11,12,11,145,9,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,3,28,191,
        8,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,2,132,143,0,32,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,0,57,0,59,0,61,0,63,0,1,0,6,2,0,65,90,97,122,1,0,48,57,
        3,0,9,10,13,13,32,32,2,0,65,70,97,102,3,0,65,90,95,95,97,122,6,0,
        34,34,92,92,98,98,110,110,114,114,116,116,204,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,1,65,1,0,0,0,3,67,1,0,0,0,5,71,1,0,0,0,7,77,1,0,0,0,9,80,1,0,
        0,0,11,85,1,0,0,0,13,91,1,0,0,0,15,96,1,0,0,0,17,101,1,0,0,0,19,
        125,1,0,0,0,21,127,1,0,0,0,23,137,1,0,0,0,25,150,1,0,0,0,27,152,
        1,0,0,0,29,154,1,0,0,0,31,156,1,0,0,0,33,158,1,0,0,0,35,161,1,0,
        0,0,37,164,1,0,0,0,39,166,1,0,0,0,41,169,1,0,0,0,43,171,1,0,0,0,
        45,174,1,0,0,0,47,176,1,0,0,0,49,178,1,0,0,0,51,180,1,0,0,0,53,183,
        1,0,0,0,55,186,1,0,0,0,57,190,1,0,0,0,59,192,1,0,0,0,61,194,1,0,
        0,0,63,196,1,0,0,0,65,66,5,61,0,0,66,2,1,0,0,0,67,68,5,109,0,0,68,
        69,5,101,0,0,69,70,5,109,0,0,70,4,1,0,0,0,71,72,5,112,0,0,72,73,
        5,114,0,0,73,74,5,105,0,0,74,75,5,110,0,0,75,76,5,116,0,0,76,6,1,
        0,0,0,77,78,5,105,0,0,78,79,5,102,0,0,79,8,1,0,0,0,80,81,5,116,0,
        0,81,82,5,104,0,0,82,83,5,101,0,0,83,84,5,110,0,0,84,10,1,0,0,0,
        85,86,5,101,0,0,86,87,5,120,0,0,87,88,5,105,0,0,88,89,5,116,0,0,
        89,12,1,0,0,0,90,92,7,0,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,1,
        0,0,0,93,94,1,0,0,0,94,14,1,0,0,0,95,97,7,1,0,0,96,95,1,0,0,0,97,
        98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,16,1,0,0,0,100,102,7,2,
        0,0,101,100,1,0,0,0,102,103,1,0,0,0,103,101,1,0,0,0,103,104,1,0,
        0,0,104,105,1,0,0,0,105,106,6,8,0,0,106,18,1,0,0,0,107,109,3,55,
        27,0,108,107,1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,
        0,0,111,112,1,0,0,0,112,116,5,46,0,0,113,115,3,55,27,0,114,113,1,
        0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,126,1,
        0,0,0,118,116,1,0,0,0,119,121,5,46,0,0,120,122,3,55,27,0,121,120,
        1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,126,
        1,0,0,0,125,108,1,0,0,0,125,119,1,0,0,0,126,20,1,0,0,0,127,132,5,
        34,0,0,128,131,3,63,31,0,129,131,9,0,0,0,130,128,1,0,0,0,130,129,
        1,0,0,0,131,134,1,0,0,0,132,133,1,0,0,0,132,130,1,0,0,0,133,135,
        1,0,0,0,134,132,1,0,0,0,135,136,5,34,0,0,136,22,1,0,0,0,137,138,
        5,47,0,0,138,139,5,47,0,0,139,143,1,0,0,0,140,142,9,0,0,0,141,140,
        1,0,0,0,142,145,1,0,0,0,143,144,1,0,0,0,143,141,1,0,0,0,144,146,
        1,0,0,0,145,143,1,0,0,0,146,147,5,10,0,0,147,148,1,0,0,0,148,149,
        6,11,0,0,149,24,1,0,0,0,150,151,5,43,0,0,151,26,1,0,0,0,152,153,
        5,45,0,0,153,28,1,0,0,0,154,155,5,42,0,0,155,30,1,0,0,0,156,157,
        5,47,0,0,157,32,1,0,0,0,158,159,5,61,0,0,159,160,5,61,0,0,160,34,
        1,0,0,0,161,162,5,33,0,0,162,163,5,61,0,0,163,36,1,0,0,0,164,165,
        5,62,0,0,165,38,1,0,0,0,166,167,5,62,0,0,167,168,5,61,0,0,168,40,
        1,0,0,0,169,170,5,60,0,0,170,42,1,0,0,0,171,172,5,60,0,0,172,173,
        5,61,0,0,173,44,1,0,0,0,174,175,5,38,0,0,175,46,1,0,0,0,176,177,
        5,94,0,0,177,48,1,0,0,0,178,179,5,124,0,0,179,50,1,0,0,0,180,181,
        5,124,0,0,181,182,5,124,0,0,182,52,1,0,0,0,183,184,5,38,0,0,184,
        185,5,38,0,0,185,54,1,0,0,0,186,187,2,48,57,0,187,56,1,0,0,0,188,
        191,7,3,0,0,189,191,3,55,27,0,190,188,1,0,0,0,190,189,1,0,0,0,191,
        58,1,0,0,0,192,193,2,48,49,0,193,60,1,0,0,0,194,195,7,4,0,0,195,
        62,1,0,0,0,196,197,5,92,0,0,197,198,7,5,0,0,198,64,1,0,0,0,12,0,
        93,98,103,110,116,123,125,130,132,143,190,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    ID = 7
    INT = 8
    WS = 9
    FLOAT = 10
    STRING = 11
    COMMENT = 12
    OP_ADD = 13
    OP_SUB = 14
    OP_MUL = 15
    OP_DIV = 16
    OP_EQ = 17
    OP_NEQ = 18
    OP_GT = 19
    OP_GEQ = 20
    OP_LT = 21
    OP_LEQ = 22
    OP_AND = 23
    OP_XOR = 24
    OP_OR = 25
    OP_LOGICAL_OR = 26
    OP_LOGICAL_AND = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'mem'", "'print'", "'if'", "'then'", "'exit'", "'+'", 
            "'-'", "'*'", "'/'", "'=='", "'!='", "'>'", "'>='", "'<'", "'<='", 
            "'&'", "'^'", "'|'", "'||'", "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "WS", "FLOAT", "STRING", "COMMENT", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "ID", 
                  "INT", "WS", "FLOAT", "STRING", "COMMENT", "OP_ADD", "OP_SUB", 
                  "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", 
                  "OP_LT", "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", 
                  "OP_LOGICAL_AND", "DIGIT", "HEXDIGIT", "BINDIGIT", "ID_LETER", 
                  "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


