# Generated from Logos.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,229,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,5,8,105,8,8,10,8,12,8,108,9,8,1,9,1,9,1,
        9,4,9,113,8,9,11,9,12,9,114,1,9,1,9,1,9,4,9,120,8,9,11,9,12,9,121,
        1,9,4,9,125,8,9,11,9,12,9,126,3,9,129,8,9,1,10,4,10,132,8,10,11,
        10,12,10,133,1,10,1,10,5,10,138,8,10,10,10,12,10,141,9,10,1,10,1,
        10,4,10,145,8,10,11,10,12,10,146,3,10,149,8,10,1,11,1,11,1,11,5,
        11,154,8,11,10,11,12,11,157,9,11,1,11,1,11,1,12,1,12,1,12,1,12,5,
        12,165,8,12,10,12,12,12,168,9,12,1,12,1,12,1,12,1,12,1,13,4,13,175,
        8,13,11,13,12,13,176,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,
        1,28,1,28,1,28,1,29,1,29,1,30,1,30,3,30,221,8,30,1,31,1,31,1,32,
        1,32,1,33,1,33,1,33,2,155,166,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,0,61,0,63,0,65,0,67,0,1,0,4,3,0,9,10,13,13,32,32,2,0,65,70,97,
        102,3,0,65,90,95,95,97,122,6,0,34,34,92,92,98,98,110,110,114,114,
        116,116,239,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,69,
        1,0,0,0,3,71,1,0,0,0,5,74,1,0,0,0,7,76,1,0,0,0,9,78,1,0,0,0,11,84,
        1,0,0,0,13,89,1,0,0,0,15,97,1,0,0,0,17,101,1,0,0,0,19,128,1,0,0,
        0,21,148,1,0,0,0,23,150,1,0,0,0,25,160,1,0,0,0,27,174,1,0,0,0,29,
        180,1,0,0,0,31,182,1,0,0,0,33,184,1,0,0,0,35,186,1,0,0,0,37,188,
        1,0,0,0,39,191,1,0,0,0,41,194,1,0,0,0,43,196,1,0,0,0,45,199,1,0,
        0,0,47,201,1,0,0,0,49,204,1,0,0,0,51,206,1,0,0,0,53,208,1,0,0,0,
        55,210,1,0,0,0,57,213,1,0,0,0,59,216,1,0,0,0,61,220,1,0,0,0,63,222,
        1,0,0,0,65,224,1,0,0,0,67,226,1,0,0,0,69,70,5,61,0,0,70,2,1,0,0,
        0,71,72,5,105,0,0,72,73,5,102,0,0,73,4,1,0,0,0,74,75,5,123,0,0,75,
        6,1,0,0,0,76,77,5,125,0,0,77,8,1,0,0,0,78,79,5,119,0,0,79,80,5,104,
        0,0,80,81,5,105,0,0,81,82,5,108,0,0,82,83,5,101,0,0,83,10,1,0,0,
        0,84,85,5,101,0,0,85,86,5,120,0,0,86,87,5,105,0,0,87,88,5,116,0,
        0,88,12,1,0,0,0,89,90,5,105,0,0,90,91,5,110,0,0,91,92,5,99,0,0,92,
        93,5,108,0,0,93,94,5,117,0,0,94,95,5,100,0,0,95,96,5,101,0,0,96,
        14,1,0,0,0,97,98,5,109,0,0,98,99,5,101,0,0,99,100,5,109,0,0,100,
        16,1,0,0,0,101,106,3,65,32,0,102,105,3,65,32,0,103,105,3,59,29,0,
        104,102,1,0,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,
        106,107,1,0,0,0,107,18,1,0,0,0,108,106,1,0,0,0,109,110,5,48,0,0,
        110,112,5,120,0,0,111,113,3,61,30,0,112,111,1,0,0,0,113,114,1,0,
        0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,129,1,0,0,0,116,117,5,48,
        0,0,117,119,5,98,0,0,118,120,3,63,31,0,119,118,1,0,0,0,120,121,1,
        0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,129,1,0,0,0,123,125,3,
        59,29,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,
        1,0,0,0,127,129,1,0,0,0,128,109,1,0,0,0,128,116,1,0,0,0,128,124,
        1,0,0,0,129,20,1,0,0,0,130,132,3,59,29,0,131,130,1,0,0,0,132,133,
        1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,135,1,0,0,0,135,139,
        5,46,0,0,136,138,3,59,29,0,137,136,1,0,0,0,138,141,1,0,0,0,139,137,
        1,0,0,0,139,140,1,0,0,0,140,149,1,0,0,0,141,139,1,0,0,0,142,144,
        5,46,0,0,143,145,3,59,29,0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,
        1,0,0,0,146,147,1,0,0,0,147,149,1,0,0,0,148,131,1,0,0,0,148,142,
        1,0,0,0,149,22,1,0,0,0,150,155,5,34,0,0,151,154,3,67,33,0,152,154,
        9,0,0,0,153,151,1,0,0,0,153,152,1,0,0,0,154,157,1,0,0,0,155,156,
        1,0,0,0,155,153,1,0,0,0,156,158,1,0,0,0,157,155,1,0,0,0,158,159,
        5,34,0,0,159,24,1,0,0,0,160,161,5,47,0,0,161,162,5,47,0,0,162,166,
        1,0,0,0,163,165,9,0,0,0,164,163,1,0,0,0,165,168,1,0,0,0,166,167,
        1,0,0,0,166,164,1,0,0,0,167,169,1,0,0,0,168,166,1,0,0,0,169,170,
        5,10,0,0,170,171,1,0,0,0,171,172,6,12,0,0,172,26,1,0,0,0,173,175,
        7,0,0,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,1,0,0,0,176,177,
        1,0,0,0,177,178,1,0,0,0,178,179,6,13,0,0,179,28,1,0,0,0,180,181,
        5,43,0,0,181,30,1,0,0,0,182,183,5,45,0,0,183,32,1,0,0,0,184,185,
        5,42,0,0,185,34,1,0,0,0,186,187,5,47,0,0,187,36,1,0,0,0,188,189,
        5,61,0,0,189,190,5,61,0,0,190,38,1,0,0,0,191,192,5,33,0,0,192,193,
        5,61,0,0,193,40,1,0,0,0,194,195,5,62,0,0,195,42,1,0,0,0,196,197,
        5,62,0,0,197,198,5,61,0,0,198,44,1,0,0,0,199,200,5,60,0,0,200,46,
        1,0,0,0,201,202,5,60,0,0,202,203,5,61,0,0,203,48,1,0,0,0,204,205,
        5,38,0,0,205,50,1,0,0,0,206,207,5,94,0,0,207,52,1,0,0,0,208,209,
        5,124,0,0,209,54,1,0,0,0,210,211,5,124,0,0,211,212,5,124,0,0,212,
        56,1,0,0,0,213,214,5,38,0,0,214,215,5,38,0,0,215,58,1,0,0,0,216,
        217,2,48,57,0,217,60,1,0,0,0,218,221,7,1,0,0,219,221,3,59,29,0,220,
        218,1,0,0,0,220,219,1,0,0,0,221,62,1,0,0,0,222,223,2,48,49,0,223,
        64,1,0,0,0,224,225,7,2,0,0,225,66,1,0,0,0,226,227,5,92,0,0,227,228,
        7,3,0,0,228,68,1,0,0,0,16,0,104,106,114,121,126,128,133,139,146,
        148,153,155,166,176,220,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    ID = 9
    INT = 10
    FLOAT = 11
    STRING = 12
    COMMENT = 13
    WS = 14
    OP_ADD = 15
    OP_SUB = 16
    OP_MUL = 17
    OP_DIV = 18
    OP_EQ = 19
    OP_NEQ = 20
    OP_GT = 21
    OP_GEQ = 22
    OP_LT = 23
    OP_LEQ = 24
    OP_AND = 25
    OP_XOR = 26
    OP_OR = 27
    OP_LOGICAL_OR = 28
    OP_LOGICAL_AND = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'if'", "'{'", "'}'", "'while'", "'exit'", "'include'", 
            "'mem'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'>'", 
            "'>='", "'<'", "'<='", "'&'", "'^'", "'|'", "'||'", "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", 
                  "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", 
                  "OP_GT", "OP_GEQ", "OP_LT", "OP_LEQ", "OP_AND", "OP_XOR", 
                  "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND", "DIGIT", "HEXDIGIT", 
                  "BINDIGIT", "ID_LETER", "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


