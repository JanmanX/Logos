# Generated from Logos.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,232,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,5,9,108,8,9,10,9,12,9,111,
        9,9,1,10,1,10,1,10,4,10,116,8,10,11,10,12,10,117,1,10,1,10,1,10,
        4,10,123,8,10,11,10,12,10,124,1,10,4,10,128,8,10,11,10,12,10,129,
        3,10,132,8,10,1,11,4,11,135,8,11,11,11,12,11,136,1,11,1,11,5,11,
        141,8,11,10,11,12,11,144,9,11,1,11,1,11,4,11,148,8,11,11,11,12,11,
        149,3,11,152,8,11,1,12,1,12,1,12,5,12,157,8,12,10,12,12,12,160,9,
        12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,168,8,13,10,13,12,13,171,9,
        13,1,13,1,13,1,13,1,13,1,14,4,14,178,8,14,11,14,12,14,179,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,
        20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,
        25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,
        31,1,31,3,31,224,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,2,158,169,
        0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,0,63,0,65,0,67,0,69,0,
        1,0,4,3,0,9,10,13,13,32,32,2,0,65,70,97,102,3,0,65,90,95,95,97,122,
        6,0,34,34,92,92,98,98,110,110,114,114,116,116,242,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
        1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,71,1,0,0,0,3,73,
        1,0,0,0,5,79,1,0,0,0,7,82,1,0,0,0,9,84,1,0,0,0,11,86,1,0,0,0,13,
        92,1,0,0,0,15,100,1,0,0,0,17,102,1,0,0,0,19,104,1,0,0,0,21,131,1,
        0,0,0,23,151,1,0,0,0,25,153,1,0,0,0,27,163,1,0,0,0,29,177,1,0,0,
        0,31,183,1,0,0,0,33,185,1,0,0,0,35,187,1,0,0,0,37,189,1,0,0,0,39,
        191,1,0,0,0,41,194,1,0,0,0,43,197,1,0,0,0,45,199,1,0,0,0,47,202,
        1,0,0,0,49,204,1,0,0,0,51,207,1,0,0,0,53,209,1,0,0,0,55,211,1,0,
        0,0,57,213,1,0,0,0,59,216,1,0,0,0,61,219,1,0,0,0,63,223,1,0,0,0,
        65,225,1,0,0,0,67,227,1,0,0,0,69,229,1,0,0,0,71,72,5,61,0,0,72,2,
        1,0,0,0,73,74,5,97,0,0,74,75,5,108,0,0,75,76,5,108,0,0,76,77,5,111,
        0,0,77,78,5,99,0,0,78,4,1,0,0,0,79,80,5,105,0,0,80,81,5,102,0,0,
        81,6,1,0,0,0,82,83,5,123,0,0,83,8,1,0,0,0,84,85,5,125,0,0,85,10,
        1,0,0,0,86,87,5,119,0,0,87,88,5,104,0,0,88,89,5,105,0,0,89,90,5,
        108,0,0,90,91,5,101,0,0,91,12,1,0,0,0,92,93,5,105,0,0,93,94,5,110,
        0,0,94,95,5,99,0,0,95,96,5,108,0,0,96,97,5,117,0,0,97,98,5,100,0,
        0,98,99,5,101,0,0,99,14,1,0,0,0,100,101,5,91,0,0,101,16,1,0,0,0,
        102,103,5,93,0,0,103,18,1,0,0,0,104,109,3,67,33,0,105,108,3,67,33,
        0,106,108,3,61,30,0,107,105,1,0,0,0,107,106,1,0,0,0,108,111,1,0,
        0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,20,1,0,0,0,111,109,1,0,0,
        0,112,113,5,48,0,0,113,115,5,120,0,0,114,116,3,63,31,0,115,114,1,
        0,0,0,116,117,1,0,0,0,117,115,1,0,0,0,117,118,1,0,0,0,118,132,1,
        0,0,0,119,120,5,48,0,0,120,122,5,98,0,0,121,123,3,65,32,0,122,121,
        1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,132,
        1,0,0,0,126,128,3,61,30,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,
        1,0,0,0,129,130,1,0,0,0,130,132,1,0,0,0,131,112,1,0,0,0,131,119,
        1,0,0,0,131,127,1,0,0,0,132,22,1,0,0,0,133,135,3,61,30,0,134,133,
        1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,138,
        1,0,0,0,138,142,5,46,0,0,139,141,3,61,30,0,140,139,1,0,0,0,141,144,
        1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,152,1,0,0,0,144,142,
        1,0,0,0,145,147,5,46,0,0,146,148,3,61,30,0,147,146,1,0,0,0,148,149,
        1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,134,
        1,0,0,0,151,145,1,0,0,0,152,24,1,0,0,0,153,158,5,34,0,0,154,157,
        3,69,34,0,155,157,9,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,160,
        1,0,0,0,158,159,1,0,0,0,158,156,1,0,0,0,159,161,1,0,0,0,160,158,
        1,0,0,0,161,162,5,34,0,0,162,26,1,0,0,0,163,164,5,47,0,0,164,165,
        5,47,0,0,165,169,1,0,0,0,166,168,9,0,0,0,167,166,1,0,0,0,168,171,
        1,0,0,0,169,170,1,0,0,0,169,167,1,0,0,0,170,172,1,0,0,0,171,169,
        1,0,0,0,172,173,5,10,0,0,173,174,1,0,0,0,174,175,6,13,0,0,175,28,
        1,0,0,0,176,178,7,0,0,0,177,176,1,0,0,0,178,179,1,0,0,0,179,177,
        1,0,0,0,179,180,1,0,0,0,180,181,1,0,0,0,181,182,6,14,0,0,182,30,
        1,0,0,0,183,184,5,43,0,0,184,32,1,0,0,0,185,186,5,45,0,0,186,34,
        1,0,0,0,187,188,5,42,0,0,188,36,1,0,0,0,189,190,5,47,0,0,190,38,
        1,0,0,0,191,192,5,61,0,0,192,193,5,61,0,0,193,40,1,0,0,0,194,195,
        5,33,0,0,195,196,5,61,0,0,196,42,1,0,0,0,197,198,5,62,0,0,198,44,
        1,0,0,0,199,200,5,62,0,0,200,201,5,61,0,0,201,46,1,0,0,0,202,203,
        5,60,0,0,203,48,1,0,0,0,204,205,5,60,0,0,205,206,5,61,0,0,206,50,
        1,0,0,0,207,208,5,38,0,0,208,52,1,0,0,0,209,210,5,94,0,0,210,54,
        1,0,0,0,211,212,5,124,0,0,212,56,1,0,0,0,213,214,5,124,0,0,214,215,
        5,124,0,0,215,58,1,0,0,0,216,217,5,38,0,0,217,218,5,38,0,0,218,60,
        1,0,0,0,219,220,2,48,57,0,220,62,1,0,0,0,221,224,7,1,0,0,222,224,
        3,61,30,0,223,221,1,0,0,0,223,222,1,0,0,0,224,64,1,0,0,0,225,226,
        2,48,49,0,226,66,1,0,0,0,227,228,7,2,0,0,228,68,1,0,0,0,229,230,
        5,92,0,0,230,231,7,3,0,0,231,70,1,0,0,0,16,0,107,109,117,124,129,
        131,136,142,149,151,156,158,169,179,223,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    ID = 10
    INT = 11
    FLOAT = 12
    STRING = 13
    COMMENT = 14
    WS = 15
    OP_ADD = 16
    OP_SUB = 17
    OP_MUL = 18
    OP_DIV = 19
    OP_EQ = 20
    OP_NEQ = 21
    OP_GT = 22
    OP_GEQ = 23
    OP_LT = 24
    OP_LEQ = 25
    OP_AND = 26
    OP_XOR = 27
    OP_OR = 28
    OP_LOGICAL_OR = 29
    OP_LOGICAL_AND = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'alloc'", "'if'", "'{'", "'}'", "'while'", "'include'", 
            "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'>'", 
            "'>='", "'<'", "'<='", "'&'", "'^'", "'|'", "'||'", "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "ID", "INT", "FLOAT", "STRING", "COMMENT", 
                  "WS", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_EQ", 
                  "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", "OP_LEQ", "OP_AND", 
                  "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND", 
                  "DIGIT", "HEXDIGIT", "BINDIGIT", "ID_LETER", "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


