# Generated from Logos.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,30,234,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,
        4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,110,8,9,10,9,12,
        9,113,9,9,1,10,1,10,1,10,4,10,118,8,10,11,10,12,10,119,1,10,1,10,
        1,10,4,10,125,8,10,11,10,12,10,126,1,10,4,10,130,8,10,11,10,12,10,
        131,3,10,134,8,10,1,11,4,11,137,8,11,11,11,12,11,138,1,11,1,11,5,
        11,143,8,11,10,11,12,11,146,9,11,1,11,1,11,4,11,150,8,11,11,11,12,
        11,151,3,11,154,8,11,1,12,1,12,1,12,5,12,159,8,12,10,12,12,12,162,
        9,12,1,12,1,12,1,13,1,13,1,13,1,13,5,13,170,8,13,10,13,12,13,173,
        9,13,1,13,1,13,1,13,1,13,1,14,4,14,180,8,14,11,14,12,14,181,1,14,
        1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,
        1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,3,31,226,8,31,1,32,1,32,1,33,1,33,1,34,1,34,1,34,2,160,
        171,0,35,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,0,63,0,65,0,67,0,
        69,0,1,0,4,3,0,9,10,13,13,32,32,2,0,65,70,97,102,3,0,65,90,95,95,
        97,122,6,0,34,34,92,92,98,98,110,110,114,114,116,116,244,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,1,71,1,0,0,0,
        3,73,1,0,0,0,5,76,1,0,0,0,7,78,1,0,0,0,9,80,1,0,0,0,11,86,1,0,0,
        0,13,89,1,0,0,0,15,94,1,0,0,0,17,102,1,0,0,0,19,106,1,0,0,0,21,133,
        1,0,0,0,23,153,1,0,0,0,25,155,1,0,0,0,27,165,1,0,0,0,29,179,1,0,
        0,0,31,185,1,0,0,0,33,187,1,0,0,0,35,189,1,0,0,0,37,191,1,0,0,0,
        39,193,1,0,0,0,41,196,1,0,0,0,43,199,1,0,0,0,45,201,1,0,0,0,47,204,
        1,0,0,0,49,206,1,0,0,0,51,209,1,0,0,0,53,211,1,0,0,0,55,213,1,0,
        0,0,57,215,1,0,0,0,59,218,1,0,0,0,61,221,1,0,0,0,63,225,1,0,0,0,
        65,227,1,0,0,0,67,229,1,0,0,0,69,231,1,0,0,0,71,72,5,61,0,0,72,2,
        1,0,0,0,73,74,5,105,0,0,74,75,5,102,0,0,75,4,1,0,0,0,76,77,5,123,
        0,0,77,6,1,0,0,0,78,79,5,125,0,0,79,8,1,0,0,0,80,81,5,119,0,0,81,
        82,5,104,0,0,82,83,5,105,0,0,83,84,5,108,0,0,84,85,5,101,0,0,85,
        10,1,0,0,0,86,87,5,100,0,0,87,88,5,111,0,0,88,12,1,0,0,0,89,90,5,
        101,0,0,90,91,5,120,0,0,91,92,5,105,0,0,92,93,5,116,0,0,93,14,1,
        0,0,0,94,95,5,105,0,0,95,96,5,110,0,0,96,97,5,99,0,0,97,98,5,108,
        0,0,98,99,5,117,0,0,99,100,5,100,0,0,100,101,5,101,0,0,101,16,1,
        0,0,0,102,103,5,109,0,0,103,104,5,101,0,0,104,105,5,109,0,0,105,
        18,1,0,0,0,106,111,3,67,33,0,107,110,3,67,33,0,108,110,3,61,30,0,
        109,107,1,0,0,0,109,108,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,
        111,112,1,0,0,0,112,20,1,0,0,0,113,111,1,0,0,0,114,115,5,48,0,0,
        115,117,5,120,0,0,116,118,3,63,31,0,117,116,1,0,0,0,118,119,1,0,
        0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,134,1,0,0,0,121,122,5,48,
        0,0,122,124,5,98,0,0,123,125,3,65,32,0,124,123,1,0,0,0,125,126,1,
        0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,134,1,0,0,0,128,130,3,
        61,30,0,129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,
        1,0,0,0,132,134,1,0,0,0,133,114,1,0,0,0,133,121,1,0,0,0,133,129,
        1,0,0,0,134,22,1,0,0,0,135,137,3,61,30,0,136,135,1,0,0,0,137,138,
        1,0,0,0,138,136,1,0,0,0,138,139,1,0,0,0,139,140,1,0,0,0,140,144,
        5,46,0,0,141,143,3,61,30,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,
        1,0,0,0,144,145,1,0,0,0,145,154,1,0,0,0,146,144,1,0,0,0,147,149,
        5,46,0,0,148,150,3,61,30,0,149,148,1,0,0,0,150,151,1,0,0,0,151,149,
        1,0,0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,136,1,0,0,0,153,147,
        1,0,0,0,154,24,1,0,0,0,155,160,5,34,0,0,156,159,3,69,34,0,157,159,
        9,0,0,0,158,156,1,0,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,161,
        1,0,0,0,160,158,1,0,0,0,161,163,1,0,0,0,162,160,1,0,0,0,163,164,
        5,34,0,0,164,26,1,0,0,0,165,166,5,47,0,0,166,167,5,47,0,0,167,171,
        1,0,0,0,168,170,9,0,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,172,
        1,0,0,0,171,169,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,
        5,10,0,0,175,176,1,0,0,0,176,177,6,13,0,0,177,28,1,0,0,0,178,180,
        7,0,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,
        1,0,0,0,182,183,1,0,0,0,183,184,6,14,0,0,184,30,1,0,0,0,185,186,
        5,43,0,0,186,32,1,0,0,0,187,188,5,45,0,0,188,34,1,0,0,0,189,190,
        5,42,0,0,190,36,1,0,0,0,191,192,5,47,0,0,192,38,1,0,0,0,193,194,
        5,61,0,0,194,195,5,61,0,0,195,40,1,0,0,0,196,197,5,33,0,0,197,198,
        5,61,0,0,198,42,1,0,0,0,199,200,5,62,0,0,200,44,1,0,0,0,201,202,
        5,62,0,0,202,203,5,61,0,0,203,46,1,0,0,0,204,205,5,60,0,0,205,48,
        1,0,0,0,206,207,5,60,0,0,207,208,5,61,0,0,208,50,1,0,0,0,209,210,
        5,38,0,0,210,52,1,0,0,0,211,212,5,94,0,0,212,54,1,0,0,0,213,214,
        5,124,0,0,214,56,1,0,0,0,215,216,5,124,0,0,216,217,5,124,0,0,217,
        58,1,0,0,0,218,219,5,38,0,0,219,220,5,38,0,0,220,60,1,0,0,0,221,
        222,2,48,57,0,222,62,1,0,0,0,223,226,7,1,0,0,224,226,3,61,30,0,225,
        223,1,0,0,0,225,224,1,0,0,0,226,64,1,0,0,0,227,228,2,48,49,0,228,
        66,1,0,0,0,229,230,7,2,0,0,230,68,1,0,0,0,231,232,5,92,0,0,232,233,
        7,3,0,0,233,70,1,0,0,0,16,0,109,111,119,126,131,133,138,144,151,
        153,158,160,171,181,225,1,6,0,0
    ]

class LogosLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    ID = 10
    INT = 11
    FLOAT = 12
    STRING = 13
    COMMENT = 14
    WS = 15
    OP_ADD = 16
    OP_SUB = 17
    OP_MUL = 18
    OP_DIV = 19
    OP_EQ = 20
    OP_NEQ = 21
    OP_GT = 22
    OP_GEQ = 23
    OP_LT = 24
    OP_LEQ = 25
    OP_AND = 26
    OP_XOR = 27
    OP_OR = 28
    OP_LOGICAL_OR = 29
    OP_LOGICAL_AND = 30

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'if'", "'{'", "'}'", "'while'", "'do'", "'exit'", "'include'", 
            "'mem'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", "'>'", 
            "'>='", "'<'", "'<='", "'&'", "'^'", "'|'", "'||'", "'&&'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "COMMENT", "WS", "OP_ADD", "OP_SUB", 
            "OP_MUL", "OP_DIV", "OP_EQ", "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", 
            "OP_LEQ", "OP_AND", "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "ID", "INT", "FLOAT", "STRING", "COMMENT", 
                  "WS", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_EQ", 
                  "OP_NEQ", "OP_GT", "OP_GEQ", "OP_LT", "OP_LEQ", "OP_AND", 
                  "OP_XOR", "OP_OR", "OP_LOGICAL_OR", "OP_LOGICAL_AND", 
                  "DIGIT", "HEXDIGIT", "BINDIGIT", "ID_LETER", "ESC" ]

    grammarFileName = "Logos.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


